import React, { useState } from "react";
import {
  StyleSheet,
  Text,
  View,
  TouchableOpacity,
  ScrollView,
  SafeAreaView,
  Alert,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";

const OperationsHub = () => {
  const [activeTab, setActiveTab] = useState("daily");

  // Handler functions for feature cards
  const handleInventoryManagement = () => {
    Alert.alert("Feature", "Opening Inventory Management");
  };

  const handleRecipeDatabase = () => {
    Alert.alert("Feature", "Opening Recipe Database");
  };

  const handleSalesMetrics = () => {
    Alert.alert("Feature", "Opening Sales Metrics");
  };

  const renderTabContent = () => {
    switch (activeTab) {
      case "daily":
        return (
          <View style={styles.tabContent}>
            <View style={styles.card}>
              <View style={styles.cardHeader}>
                <Text style={styles.cardTitle}>Today's Sales Overview</Text>
                <Text style={styles.cardDescription}>
                  Sales data for {new Date().toLocaleDateString()}
                </Text>
              </View>
              <View style={styles.cardContent}>
                <View style={styles.chartPlaceholder}>
                  <Text style={styles.placeholderText}>
                    Daily sales chart visualization would appear here
                    {/* TODO: Replace with charting library like react-native-chart-kit */}
                  </Text>
                </View>
                <View style={styles.statsGrid}>
                  <View style={styles.statCard}>
                    <Text style={styles.statLabel}>Total Sales</Text>
                    <Text style={styles.statValue}>$2,845.50</Text>
                  </View>
                  <View style={styles.statCard}>
                    <Text style={styles.statLabel}>Orders</Text>
                    <Text style={styles.statValue}>124</Text>
                  </View>
                  <View style={styles.statCard}>
                    <Text style={styles.statLabel}>Avg. Order Value</Text>
                    <Text style={styles.statValue}>$22.95</Text>
                  </View>
                </View>
              </View>
            </View>

            <View style={styles.card}>
              <View style={styles.cardHeader}>
                <Text style={styles.cardTitle}>Top Selling Items</Text>
                <Text style={styles.cardDescription}>
                  Most popular menu items today
                </Text>
              </View>
              <View style={styles.cardContent}>
                {[
                  {
                    name: "Signature Burger",
                    quantity: 42,
                    revenue: "$546.00",
                  },
                  { name: "House Salad", quantity: 38, revenue: "$418.00" },
                  { name: "Truffle Fries", quantity: 36, revenue: "$324.00" },
                  { name: "Craft IPA", quantity: 31, revenue: "$217.00" },
                  { name: "Chocolate Cake", quantity: 28, revenue: "$196.00" },
                ].map((item, index) => (
                  <View
                    key={index}
                    style={[
                      styles.menuItem,
                      index === 4 && styles.menuItemLast,
                    ]}
                  >
                    <View>
                      <Text style={styles.menuItemName}>{item.name}</Text>
                      <Text style={styles.menuItemQuantity}>
                        {item.quantity} sold
                      </Text>
                    </View>
                    <Text style={styles.menuItemRevenue}>{item.revenue}</Text>
                  </View>
                ))}
              </View>
            </View>
          </View>
        );
      case "weekly":
        return (
          <View style={styles.tabContent}>
            <View style={styles.card}>
              <View style={styles.cardHeader}>
                <Text style={styles.cardTitle}>Weekly Sales Trends</Text>
                <Text style={styles.cardDescription}>
                  Performance over the past 7 days
                </Text>
              </View>
              <View style={styles.cardContent}>
                <View style={styles.chartPlaceholder}>
                  <Text style={styles.placeholderText}>
                    Weekly sales chart visualization would appear here
                    {/* TODO: Replace with charting library like react-native-chart-kit */}
                  </Text>
                </View>
                <View style={styles.statsGrid}>
                  <View style={styles.statCard}>
                    <Text style={styles.statLabel}>Weekly Revenue</Text>
                    <Text style={styles.statValue}>$18,742.25</Text>
                  </View>
                  <View style={styles.statCard}>
                    <Text style={styles.statLabel}>Week-over-Week</Text>
                    <Text style={[styles.statValue, styles.positiveValue]}>
                      +8.3%
                    </Text>
                  </View>
                  <View style={styles.statCard}>
                    <Text style={styles.statLabel}>Busiest Day</Text>
                    <Text style={styles.statValue}>Saturday</Text>
                  </View>
                </View>
              </View>
            </View>
          </View>
        );
      case "monthly":
        return (
          <View style={styles.tabContent}>
            <View style={styles.card}>
              <View style={styles.cardHeader}>
                <Text style={styles.cardTitle}>Monthly Performance</Text>
                <Text style={styles.cardDescription}>
                  Revenue and trends for the current month
                </Text>
              </View>
              <View style={styles.cardContent}>
                <View style={styles.chartPlaceholder}>
                  <Text style={styles.placeholderText}>
                    Monthly performance chart visualization would appear here
                    {/* TODO: Replace with charting library like react-native-chart-kit */}
                  </Text>
                </View>
                <View style={styles.statsGrid}>
                  <View style={styles.statCard}>
                    <Text style={styles.statLabel}>Monthly Revenue</Text>
                    <Text style={styles.statValue}>$76,245.80</Text>
                  </View>
                  <View style={styles.statCard}>
                    <Text style={styles.statLabel}>Month-over-Month</Text>
                    <Text style={[styles.statValue, styles.positiveValue]}>
                      +12.5%
                    </Text>
                  </View>
                  <View style={styles.statCard}>
                    <Text style={styles.statLabel}>Profit Margin</Text>
                    <Text style={styles.statValue}>24.8%</Text>
                  </View>
                </View>
              </View>
            </View>
          </View>
        );
      default:
        return null;
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView}>
        <View style={styles.header}>
          <Text style={styles.title}>Operations Hub</Text>
          <Text style={styles.subtitle}>
            Manage inventory, recipes, and view sales metrics
          </Text>
        </View>

        <View style={styles.featureGrid}>
          <TouchableOpacity
            style={styles.featureCard}
            accessible
            accessibilityLabel="Inventory Management"
            onPress={handleInventoryManagement}
          >
            <View style={styles.featureHeader}>
              <Ionicons name="cube-outline" size={20} color="#007AFF" />
              <Text style={styles.featureTitle}>Inventory Management</Text>
            </View>
            <Text style={styles.featureDescription}>
              Track stock levels, manage orders, and set reorder points
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.featureCard}
            accessible
            accessibilityLabel="Recipe Database"
            onPress={handleRecipeDatabase}
          >
            <View style={styles.featureHeader}>
              <Ionicons name="book-outline" size={20} color="#007AFF" />
              <Text style={styles.featureTitle}>Recipe Database</Text>
            </View>
            <Text style={styles.featureDescription}>
              Access and manage standardized recipes and preparation guides
            </Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.featureCard}
            accessible
            accessibilityLabel="Sales Metrics"
            onPress={handleSalesMetrics}
          >
            <View style={styles.featureHeader}>
              <Ionicons name="stats-chart-outline" size={20} color="#007AFF" />
              <Text style={styles.featureTitle}>Sales Metrics</Text>
            </View>
            <Text style={styles.featureDescription}>
              View sales data, trends, and performance analytics
            </Text>
          </TouchableOpacity>
        </View>

        <View style={styles.tabsContainer}>
          <View style={styles.tabBar}>
            <TouchableOpacity
              style={[
                styles.tabButton,
                activeTab === "daily" && styles.activeTabButton,
              ]}
              accessible
              accessibilityLabel="Daily Sales Tab"
              onPress={() => setActiveTab("daily")}
            >
              <Text
                style={[
                  styles.tabButtonText,
                  activeTab === "daily" && styles.activeTabButtonText,
                ]}
              >
                Daily Sales
              </Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[
                styles.tabButton,
                activeTab === "weekly" && styles.activeTabButton,
              ]}
              accessible
              accessibilityLabel="Weekly Trends Tab"
              onPress={() => setActiveTab("weekly")}
            >
              <Text
                style={[
                  styles.tabButtonText,
                  activeTab === "weekly" && styles.activeTabButtonText,
                ]}
              >
                Weekly Trends
              </Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[
                styles.tabButton,
                activeTab === "monthly" && styles.activeTabButton,
              ]}
              accessible
              accessibilityLabel="Monthly Performance Tab"
              onPress={() => setActiveTab("monthly")}
            >
              <Text
                style={[
                  styles.tabButtonText,
                  activeTab === "monthly" && styles.activeTabButtonText,
                ]}
              >
                Monthly Performance
              </Text>
            </TouchableOpacity>
          </View>

          {renderTabContent()}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
  },
  scrollView: {
    flex: 1,
    padding: 16,
  },
  header: {
    marginBottom: 16,
  },
  title: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 14,
    color: "#666",
  },
  featureGrid: {
    marginBottom: 24,
  },
  featureCard: {
    backgroundColor: "#fff",
    borderRadius: 8,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: "#eee",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  featureHeader: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 8,
  },
  featureTitle: {
    fontSize: 16,
    fontWeight: "600",
    marginLeft: 8,
  },
  featureDescription: {
    fontSize: 14,
    color: "#666",
  },
  tabsContainer: {
    flex: 1,
  },
  tabBar: {
    flexDirection: "row",
    marginBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: "#eee",
  },
  tabButton: {
    paddingVertical: 10,
    paddingHorizontal: 16,
    marginRight: 8,
  },
  activeTabButton: {
    borderBottomWidth: 2,
    borderBottomColor: "#007AFF",
  },
  tabButtonText: {
    fontSize: 14,
    fontWeight: "500",
    color: "#666",
  },
  activeTabButtonText: {
    color: "#007AFF",
  },
  tabContent: {
    flex: 1,
  },
  card: {
    backgroundColor: "#fff",
    borderRadius: 8,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: "#eee",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  cardHeader: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  cardTitle: {
    fontSize: 16,
    fontWeight: "600",
    marginBottom: 4,
  },
  cardDescription: {
    fontSize: 14,
    color: "#666",
  },
  cardContent: {
    padding: 16,
  },
  chartPlaceholder: {
    height: 300,
    backgroundColor: "#f9f9f9",
    borderRadius: 8,
    justifyContent: "center",
    alignItems: "center",
    marginBottom: 16,
  },
  placeholderText: {
    color: "#999",
    fontSize: 14,
  },
  statsGrid: {
    marginTop: 16,
  },
  statCard: {
    padding: 16,
    borderWidth: 1,
    borderColor: "#eee",
    borderRadius: 8,
    marginBottom: 8,
  },
  statLabel: {
    fontSize: 14,
    color: "#666",
    marginBottom: 4,
  },
  statValue: {
    fontSize: 20,
    fontWeight: "bold",
  },
  positiveValue: {
    color: "#4CAF50",
  },
  menuItem: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  menuItemLast: {
    borderBottomWidth: 0,
  },
  menuItemName: {
    fontSize: 15,
    fontWeight: "500",
  },
  menuItemQuantity: {
    fontSize: 13,
    color: "#666",
    marginTop: 2,
  },
  menuItemRevenue: {
    fontSize: 15,
    fontWeight: "500",
  },
});

export default OperationsHub;
